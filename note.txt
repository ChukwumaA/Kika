::: Things I've done (Ifechi)
- I added username to the schemas of both user & buyer schemas
- I also fixed the logic to check use username if email is not 
  present at login for the User endpoint


::: Questions
1. Can't we use the pattern of auth controller (&route) for the buyer controller(&route) ?
   - Its a bit confusing compared to the auth controller and route
   - I'd love to learn why you its like that

2. Since signup requirements are the same for both user and buyer, 
    can't we simply use the auth route/controller for that?
    - Schema can then have a 'role' property which will be sent through the request
    depending on the value from the frontend page that the user is signing up or signing in from.

3. The isAdmin property in user schema does it mean us(the owners who will have acces to the backend/database)
    or Vendors because they can post?


::: Suggestions
1. All user and vendors can be served either from /auth/... or /accounts/...
2. If 1 is not possible, then can we simply call change user to vendor for easy readability
3. We can use ratings to show validation of vendors

{
      "name": "sample name",
      "slug": "sample-name-",
      "image": "/images/p1.jpg",
      "price": 0,
      "category": "sample category",
      "brand": "sample brand",
      "countInStock": 0,
      "rating": 0,
      "numReviews": 0,
      "description": "sample description"
}


::: What was done? (Joshua)
- Project structuring and code cleanup
- Changed User model to include role to accommodate the different user roles
- changed naming of some endpoints
- "Authorize" in the auth middleware can be used to defined the roles that can 
  access certain routes while "Protect" is used to ensure user is logged in on the route.
- '/seed' route in the auth routes to add dummy user data from data.js
-

Create Vendor JSON
{
    "name":"ifechi",
    "email":"ifechi@gmail.com",
    "password":"12345678",
    "phone":"0987654441",
    "business_name":"ifechi vendor",
    "address":"Bayelsa",
    "city":"Bayelsa",
    "state":"Bayelsa",
    "terms":true,
    "id_num":1,
    "id_card":"image/jpg",
}




// -- Working code -- //
   //  return uploader.upload(file).then((result) => {
  //     console.log(result)
  //     const image = result.url;
  //     console.log("IMAGE......",image)
  //   })
  //https://medium.com/@dharmykoya38/image-upload-in-nodejs-using-multer-and-cloudinary-version-2-17924c22fce7